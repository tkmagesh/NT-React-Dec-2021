Develop Intelligence

Schedule:
    Commence    : 9:00 AM
    Tea Break   : 11:00 AM (20 mins)
    Lunch Break : 1:00 PM (1 Hr)
    Tea Break   : 3:30 PM (20 mins)
    Wind up     : 5:00 PM

Methology:
    Handson Driven
    No Powerpoints

Expectations:
    Interactive
    Try to complete the assignments
    At least 50% of the participants should complete the assignments
    Ready to share your solutions

About You:
    Name
    Total Experience
    Primary Skillset
    Experiance in React (if any)
    Any interesting books you read / shows you watched recently


More money than God
Too big to fail
Subtle art of not giving a fuck
Everything is fucked

Topics:
    (done) 1. What is the problem that react is trying to solve?
    (done) 2. React
    (done) 3. VDOM
    (done) 4. JSX
    5. ES6
    6. Components
    7. App development using Components
    8. Need for state management
    9. Build our own state manager
    10. Redux
    11. Async Programming in JavaScript
    12. Redux-Saga
    13. Routing
    14. Packaging & Deployment

https://github.com/tkmagesh/nt-react-dec-2021

Software Requirements:
    1. Chrome Browser
    2. Visual Studio Code (OR any editor)
    3. Node.js (LTS)


What are we trying to accomplish with React?
    RIA (Rich Internet Application)

Salary Calculator
    Basic + HRA + DA - Tax

Assumptions:
    1. 100% functionally correct
    2. preparing the code for deployment is taken care by another team


Reactive (Dumb) X Proactive (Knowledge)

Incremental approach Vs All in One approach

HTML & JSX
    HTML
        1. Open tags without correstponding close tags are allowed
        2. 'for' attribute is allowed
        3. 'class' attribute is allowed

    JSX
        1. Every open tag must have the correstponding close tag
        2. Use 'htmlFor' in place of 'for' attribute
        3. Use 'className' in place of 'class' attribute


ES6 (ECMAScript6 / ES2015 / ESNext)
    1. let
    2. const
    3. array destructuring
    4. rest operator (array)
    5. spread operator (array)
    6. object destructuring
    7. rest operator (object)
    8. spread operator (object)
    9. default parameters
    10. arrow functions
    11. template strings
    12. iterators
    13. generators


Custom Iterator
    var genFibNos = {
        [Symbol.iterator]() {
            let pre = 0, cur = 1;
            return {
                next(){
                    [pre, cur] = [cur, pre + cur];
                    return { done : false, value : cur }
                }
            }
        }
    }

Generator Functions
    function *genNos(){
        yield 2;
        yield 4;
        yield 6;
        yield 8;
        return 10;
    }

Assignment
    Array Methods
        - map
        - reduce
        - filter
        - forEach