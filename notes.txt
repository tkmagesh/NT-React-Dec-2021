Develop Intelligence

Schedule:
    Commence    : 9:00 AM
    Tea Break   : 11:00 AM (20 mins)
    Lunch Break : 1:00 PM (1 Hr)
    Tea Break   : 3:30 PM (20 mins)
    Wind up     : 5:00 PM

Methology:
    Handson Driven
    No Powerpoints

Expectations:
    Interactive
    Try to complete the assignments
    At least 50% of the participants should complete the assignments
    Ready to share your solutions

About You:
    Name
    Total Experience
    Primary Skillset
    Experiance in React (if any)
    Any interesting books you read / shows you watched recently


More money than God
Too big to fail
Subtle art of not giving a fuck
Everything is fucked

Topics:
    (done) 1. What is the problem that react is trying to solve?
    (done) 2. React
    (done) 3. VDOM
    (done) 4. JSX
    (done) 5. ES6
    6. Components
    7. App development using Components
    8. Need for state management
    9. Build our own state manager
    10. Redux
    11. Async Programming in JavaScript
    12. Redux-Saga
    13. Routing
    14. Packaging & Deployment

https://github.com/tkmagesh/nt-react-dec-2021

Software Requirements:
    1. Chrome Browser
    2. Visual Studio Code (OR any editor)
    3. Node.js (LTS)


What are we trying to accomplish with React?
    RIA (Rich Internet Application)

Salary Calculator
    Basic + HRA + DA - Tax

Assumptions:
    1. 100% functionally correct
    2. preparing the code for deployment is taken care by another team


Reactive (Dumb) X Proactive (Knowledge)

Incremental approach Vs All in One approach

HTML & JSX
    HTML
        1. Open tags without correstponding close tags are allowed
        2. 'for' attribute is allowed
        3. 'class' attribute is allowed

    JSX
        1. Every open tag must have the correstponding close tag
        2. Use 'htmlFor' in place of 'for' attribute
        3. Use 'className' in place of 'class' attribute


ES6 (ECMAScript6 / ES2015 / ESNext)
    1. let
    2. const
    3. array destructuring
    4. rest operator (array)
    5. spread operator (array)
    6. object destructuring
    7. rest operator (object)
    8. spread operator (object)
    9. default parameters
    10. arrow functions
    11. template strings
    12. iterators
    13. generators
    14. classes
    15. object constructor enhancement
    Todo:
    16. modules
    17. promises
    18. async/await


Custom Iterator
    var genFibNos = {
        [Symbol.iterator]() {
            let pre = 0, cur = 1;
            return {
                next(){
                    [pre, cur] = [cur, pre + cur];
                    return { done : false, value : cur }
                }
            }
        }
    }

Generator Functions
    function *genNos(){
        yield 2;
        yield 4;
        yield 6;
        yield 8;
        return 10;
    }

Class
class Employee{
    id = 0;
    name = '';
    salary = 0;

    constructor(id, name, salary){
        this.id = id;
        this.name = name;
        this.salary = salary;
    }

    display(){
        return `id=${this.id}, name=${this.name} and salary=${this.salary}`;
    }
}

class FulltimeEmployee extends Employee{
    benefits = '';
    constructor(id, name, salary, benefits){
        super(id, name, salary);
        this.benefits = benefits;
    }
    display(){
        return `${super.display()} and benefits=${this.benefits}`;
    }
}

function add(...args){
    function parseArg(n){
        if (typeof n === 'function') return parseArg(n());
        if (Array.isArray(n)) return add(...n);
        return isNaN(n) ? 0 : parseInt(n, 10);
    }
    return args.length <= 1 ? parseArg(args[0]) : parseArg(args[0]) + add(args.slice(1))
}


Assignment
    Array Methods
        - map
        - reduce
        - filter
        - forEach

Component
    encapsulation of Presentation + UI Behavior + State
    reusablility
    modularity
    maintainability
    Composability

    Toolbar
        Toolbar icons
    Workspace
        Tabs
            Tab Header
            Tab Body

    Class component
    Functional component


Calculator-1
<h1>Calculator-1</h1>
<hr>
<input type="number" name="" id="">
<input type="number" name="" id="">
<br>
<button>Add</button>
<button>Subtract</button>
<button>Multiply</button>
<button>Divide</button>
<div>[Result]</div>

Calculator-2
<h1>Calculator-2</h1>
<hr>
<input type="number" name="" id="">
<select name="" id="">
    <option value="add">Add</option>
    <option value="subtract">Subtract</option>
    <option value="multiply">Multiply</option>
    <option value="divide">Divide</option>
</select>
<input type="number" name="" id="">
<button>Calculate</button>
<div>[Result]</div>


Assignment
Build the salary calculator using react

React hooks
    functions used to handle side-effects in functional components
    hook functions can be used ONLY in functional components
    hook function name must start with 'use'
    Built in hooks
        useState
            used to manage the state in a functional component
        useEffect
            used to handle life cycle events in functional component
        useContext
        useCallback
        useMemo
        useReducer

Advantages of Functional Components
    1. No need to create component instances
    2. unnecessary life cycle events will not be executed

State
    UI State
        Any data that supports the 'presentational' needs of the component
        It is hightly UNLIKELY that this data is needed outside its component
        Feel free to maintain this in the component state

    Application State
        Any data that supports the core business logic of the applications
        It is highly LIKELY that this data is needed through out the application
        DO NOT maintain this data in the component state

State Manager
    1. Store
        All the application state for the WHOLE application is maintained in this single store
        NOT a persistent store
        This acts as a 'single source of truth' for the application
        APIs
            getState()
            subscribe(fn)
            dispatch(action)

    2. Reducer
        A function that encapsulates the 'state change' logic
        It should be a pure function
            immutable state
            should not interact with any other entity
            NO side effects
        It should return 'new state' if the state is changed or 'current state' as it is.

    3. Action
        An object that will have instrutions for the state change
        contention => { type : 'UNIQUE ACTION TYPE', (optional) payload : 'DATA' }
       